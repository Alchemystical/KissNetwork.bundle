#!/usr/bin/env python

"""
KissNetwork shared code.
Manipulate Headers for Kiss domains.
"""

# import section(s) not included in Plex Plug-In Framwork
import sys
import os
from io import open
import json
import domain as Domain
import common as Common

# constants
HEADER_FILE = os.path.join(Common.SUPPORT_PATH, 'Header_Dict')

# Import cfscrape from Shared Libraries
import cfscrape

####################################################################################################
def CFTest():
    """ test cfscrape, if error then need javascript runtime """

    cookie = cfscrape.get_cookie_string(url=Common.ANIME_BASE_URL, user_agent=Common.USER_AGENT)

    return str(cookie)

####################################################################################################
def CreateHeadersDict():
    """Genreate Header Dict Data, then send to SaveHeaderDict()"""

    Log.Debug('* Headers dictionary not yet created. Creating new Header Dict and filling in data')

    # Get cookies for URLs and save to Header Dict for future use.
    for i, (type_title, base_url) in enumerate(Common.BASE_URL_LIST_T):
        cookie, user_agent = cfscrape.get_cookie_string(url=base_url, user_agent=Common.USER_AGENT)
        if i == 0:
            temp_dict = {
                type_title: {
                    'cookie': cookie, 'user-agent': user_agent,
                    'date': str(Datetime.Now()), 'referer': base_url
                    }
                }
        else:
            temp_dict.update({
                type_title: {
                    'cookie': cookie, 'user-agent': user_agent,
                    'date': str(Datetime.Now()), 'referer': base_url
                    }
                })

        Log.Debug('* cookies for %s = %s' %(type_title, temp_dict[type_title]['cookie']))
        Log.Debug('* current header dict = %s' %temp_dict)

    SaveHeaderDict(temp_dict)

    return temp_dict

####################################################################################################
def GetHeadersForURL(url, update=False):
    """
    Set headers for URL. Return headers from headers dict.
    If cookies have expired then get new ones.
    """

    Log.Debug('*' * 80)
    Log.Debug('* URL to get headers = %s' %url)

    # get base url for headers
    base_url = Common.GetBaseURL(url)

    # get title for headers
    type_title = Common.GetTypeTitle(url)

    # get current datetime
    current_datetime = Datetime.Now()

    # cookie time constants for each site.
    time_constants = {
        'Anime': Datetime.Delta(days=1), 'Cartoon': Datetime.Delta(days=5),
        'Drama': Datetime.Delta(minutes=30), 'Manga': Datetime.Delta(hours=23)}

    test = None
    header_data = LoadHeaderDict()

    if len(header_data) > 1:
        # Update Header Dictionary
        cachetime = Datetime.ParseDate(header_data[type_title]['date'])
        deltatime = current_datetime - cachetime

        if deltatime >= time_constants[type_title] or update:
            Log.Debug('* Time to update %s cookies' %type_title)

            cookie, user_agent = cfscrape.get_cookie_string(url=base_url, user_agent=Common.USER_AGENT)
            header_data.update({
                type_title: {
                    'cookie': cookie, 'user-agent': user_agent,
                    'referer': base_url, 'date': str(Datetime.Now())}})

            Log.Debug('* Updated %s Header to >>' %type_title)
            Log.Debug('* %s' %header_data[type_title])

            # update header dict
            SaveHeaderDict(header_data)
            Log.Debug('* New Cookies saved for %s Header' %base_url)
        else:
            Log.Debug('* Time left until %s cookies need to be updated = %s' %(type_title, str(time_constants[type_title] - deltatime)))
    else:
        CreateHeadersDict()
        header_data = LoadHeaderDict()

    # setup headers to return, do not want date in header field
    headers_to_return = {
        'cookie': header_data[type_title]['cookie'],
        'user-agent': header_data[type_title]['user-agent'],
        'referer': header_data[type_title]['referer']
        }

    Log.Debug('* Header for %s Loaded >>' %base_url)
    Log.Debug('* %s' %headers_to_return)
    Log.Debug('*' * 80)

    return headers_to_return

####################################################################################################
def SaveHeaderDict(content=dict):
    """ Save Header Dict to file """

    Log.Debug('* Saving Header to file')

    with open(HEADER_FILE, 'wb') as f:
        json.dump(content, f, indent=4, sort_keys=True, separators=(',', ': '))

    Log.Debug('* Header Dictionary file has been saved')

    return content

####################################################################################################
def LoadHeaderDict():
    """Load Header Dict"""

    Log.Debug('* header dict file location >>')
    Log.Debug('* %s' %HEADER_FILE)

    if os.path.isfile(HEADER_FILE):
        Log.Debug('* loading header dict in json format')
        with open(HEADER_FILE) as data_file:
            data = json.load(data_file)

        return data
    else:
        Log.Debug('* header dict file not found')
        Log.Debug('* creating new header dict file')

        return CreateHeadersDict()
