#!/usr/bin/env python

"""
KissNetwork shared code.
Manipulate Headers for Kiss domains.
"""

# import section(s) not included in Plex Plug-In Framwork
import sys
import os
from io import open
import json
import domain as Domain
import common as Common

# constants
HEADER_FILE = os.path.join(Common.SUPPORT_PATH, 'Header_Dict')

# Import Shared Library Modules
try:
    import cfscrape
except Exception as e:
    cfscrape = None
    Log.Critical('* cfscrape import ERROR: %s' %str(e))
import requests

####################################################################################################
def CFTest():
    """ test cfscrape, if error then need javascript runtime """

    cookie = cfscrape.get_cookie_string(url=Common.ANIME_BASE_URL, user_agent=Common.USER_AGENT)

    return str(cookie)

####################################################################################################
def set_header(url):
    """
    Set header for given URL
    Parse cf_clearance for cookie expire time
    """

    base_url = Common.GetBaseURL(url)
    type_title = Common.GetTypeTitle(url)
    try:
        cookie, user_agent = cfscrape.get_cookie_string(url=base_url, user_agent=Common.USER_AGENT)
        r_cf_clearance = Regex(r'cf_clearance\=.*\-(\d+)\-(\d+)').search(cookie)

        if r_cf_clearance:
            date = int(r_cf_clearance.group(1))
            expire = date + int(r_cf_clearance.group(2))
        else:
            expire = Datetime.TimestampFromDatetime(Datetime.Now() + Datetime.Delta(days=364))

        return {
            type_title: {
                'cookie': cookie, 'user-agent': user_agent, 'referer': base_url,
                'expire': '%i' %expire
                }
            }
    except Exception as e:
        Log.Error('* set_header Error: %s' %str(e))
        return {}

####################################################################################################
def CreateHeadersDict():
    """Genreate Header Dict Data, then send to SaveHeaderDict()"""

    Log.Debug('* Headers dictionary not yet created. Creating new Header Dict and filling in data')

    # Get cookies for URLs and save to Header Dict for future use.
    for i, (type_title, base_url) in enumerate(Common.BASE_URL_LIST_T):
        if i == 0:
            temp_dict = set_header(base_url)
        else:
            temp_dict.update(set_header(base_url))

        Log.Debug('* cookies for %s = %s' %(type_title, temp_dict[type_title]['cookie']))
        Log.Debug('* current header dict = %s' %temp_dict)

    SaveHeaderDict(temp_dict)

    return temp_dict

####################################################################################################
def GetHeadersForURL(url, update=False):
    """
    Set headers for URL. Return headers from headers dict.
    If cookies have expired then get new ones.
    """

    #Log.Debug('* URL to get headers = %s' %url)

    # get base url for headers
    base_url = Common.GetBaseURL(url)

    # get title for headers
    type_title = Common.GetTypeTitle(url)

    # get current datetime
    current_timestamp = Datetime.TimestampFromDatetime(Datetime.Now())

    # load current header dict
    header_data = LoadHeaderDict()

    if len(header_data) > 1:
        # Update Header Dictionary
        if type_title in header_data.keys():
            if 'expire' in header_data[type_title].keys():
                expire = int(header_data[type_title]['expire'])
                update = True if update else (True if current_timestamp >= expire else False)
            else:
                update = True
        else:
            update = True

        if update:
            Log.Debug('* Time to update %s cookies' %type_title)

            header_data.update(set_header(base_url))

            Log.Debug('* Updated %s Header to >>' %type_title)
            Log.Debug('* %s' %header_data[type_title])

            # update header dict
            SaveHeaderDict(header_data)
            Log.Debug('* New Cookies saved for %s Header' %base_url)
        else:
            if 'expire' in header_data[type_title].keys():
                current_datetime = Datetime.FromTimestamp(int(current_timestamp))
                expire_datetime = Datetime.FromTimestamp(int(expire))
                deltatime = str(expire_datetime - current_datetime)
                Log.Debug('* Time left until %s cookies need to be updated = %s' %(type_title, deltatime))
            else:
                Log.Warn('* No Expire time within %s cookies' %type_title)
    else:
        CreateHeadersDict()
        header_data = LoadHeaderDict()

    # setup headers to return, do not want date in header field
    headers_to_return = {
        'cookie': header_data[type_title]['cookie'],
        'user-agent': header_data[type_title]['user-agent'],
        'referer': header_data[type_title]['referer']
        }

    #Log.Debug('* Header for %s Loaded >>' %base_url)
    #Log.Debug('* %s' %headers_to_return)
    #Log.Debug('*' * 80)

    return headers_to_return

####################################################################################################
def SaveHeaderDict(content=dict):
    """ Save Header Dict to file """

    Log.Debug('* Saving Header to file')

    with open(HEADER_FILE, 'wb') as f:
        json.dump(content, f, indent=4, sort_keys=True, separators=(',', ': '))

    Log.Debug('* Header Dictionary file has been saved')

    return content

####################################################################################################
def LoadHeaderDict():
    """Load Header Dict"""

    Log.Debug('* header dict file location >>')
    Log.Debug('* %s' %HEADER_FILE)

    if os.path.isfile(HEADER_FILE) and os.stat(HEADER_FILE).st_size != 0:
        Log.Debug('* loading header dict in json format')
        with open(HEADER_FILE) as data_file:
            data = json.load(data_file)

        return data
    else:
        Log.Debug('* header dict file not found, or file is empty')
        Log.Debug('* creating new header dict file')

        return CreateHeadersDict()

####################################################################################################
def ElementFromURL(url):
    """setup requests html"""

    page = requests.get(url, headers=GetHeadersForURL(url))
    html = HTML.ElementFromString(page.text)
    return html

####################################################################################################
def Request(url, headers=None, raw=False):
    """setup requests text page"""

    if headers:
        r = requests.get(url, headers=headers)
    else:
        r = requests.get(url, headers=GetHeadersForURL(url))

    if not raw:
        r = r.text

    return r
