#!/usr/bin/env python

"""
Kiss(anime, cartoon, and drama) Service code - Gather all image urls for a Chapter.
"""

import base64, os, sys

submodule_folders = ['cfscrape', 'execjs', 'requests']
for folder in submodule_folders:
    try:
        path = os.getcwd().split("?\\")[1].split('Plug-in Support')[0]+"Plug-ins/KissNetwork.bundle/Contents/Modules/" + folder
        Log('try 1 %s' % path)
    except:
        path = os.getcwd().split("Plug-in Support")[0]+"Plug-ins/KissNetwork.bundle/Contents/Modules/" + folder
        Log('try 2 %s' % path)

    if path not in sys.path:
        sys.path.append(path)
        Log('%s added to sys.path' % path)

import cfscrape

########################################################################################
def NormalizeURL(url):
    """
    This function should return a 'normalised' version of the given URL.
    Plex uses the URL
    """

    return url

########################################################################################
def MetadataObjectForURL(url):
    """
    This function should create and return a metadata object (for example, a
    VideoClipObject) and populate it with metadata from the given URL.
    Only the metadata should be added here, the object's key and rating_key properties
    will be synthesised based on the URL.
    """

    html = ElementFromURL(url)

    title = html.xpath("//option[@selected='selected']/text()")[0].replace('\n', '')
    summary = html.xpath("//meta[@name='description']/@content")[0].replace('\n', '')

    return VideoClipObject(
        title=title,
        summary=summary)

########################################################################################
def MediaObjectsForURL(url):
    """
    This function should create and return a list of media objects
    and part objects representing the media available at the given URL.
    Callbacks may be used if obtaining the final media location requires
    additional computation.
    """

    html = ElementFromURL(url)
    mo = []

    for node in html.xpath('//select[@id="selectQuality"]/option/text()'):
        mo.append(MediaObject(
            parts=[PartObject(key=Callback(PlayVideo, url=url, fmt=node))],
            video_resolution=node[:-1],
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming = True  if Client.Product != 'Plex Web' else False))

    return mo

########################################################################################
def PlayVideo(url, fmt):

    html = ElementFromURL(url)

    for node in reversed(html.xpath('//select[@id="selectQuality"]/option')):
        if node.text == fmt:
            video_url = node.get('value')
            break
        else:
            video_url = node.get('value')

    return Redirect(base64.b64decode(video_url))

########################################################################################
def ElementFromURL(url):
    """
    Retrun url in html formate
    """

    scraper = cfscrape.create_scraper()
    page = scraper.get(url)
    myscrape = HTML.ElementFromString(page.text)

    return myscrape

