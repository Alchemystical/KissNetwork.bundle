#!/usr/bin/env python

"""Kiss(anime, cartoon, and drama) Service code"""

# import local modules
import base64, os, sys

modules_path = 'Plug-ins/KissNetwork.bundle/Contents/Modules'
try:
    path = os.getcwd().split('?\\')[1].split('Plug-in Support')[0] + modules_path
    Log('try 1 %s' % path)
except:
    path = os.getcwd().split('Plug-in Support')[0] + modules_path
    Log('try 2 %s' % path)

if path not in sys.path:
    sys.path.append(path)
    Log('%s added to sys.path' % path)

# import custom modules
import cfscrape

########################################################################################
def NormalizeURL(url):
    """
    This function should return a 'normalised' version of the given URL.
    Plex uses the URL
    """

    return url

########################################################################################
def MetadataObjectForURL(url):
    """
    This function should create and return a metadata object (for example, a
    VideoClipObject) and populate it with metadata from the given URL.
    Only the metadata should be added here, the object's key and rating_key properties
    will be synthesised based on the URL.
    """

    # decode url for parsing
    url = url.decode('unicode_escape')
    Log('MetadataObjectForURL url=%s' %url)
    html = ElementFromURL(url)

    # set the video title
    title = html.xpath("//option[@selected='selected']/text()")[0]
    title = title.replace('\n', '').strip()

    # set the video summary
    summary = html.xpath("//meta[@name='description']/@content")[0]
    summary = summary.replace('\n', '').strip()

    return VideoClipObject(title=title, summary=summary)

########################################################################################
def MediaObjectsForURL(url):
    """
    This function should create and return a list of media objects
    and part objects representing the media available at the given URL.
    Callbacks may be used if obtaining the final media location requires
    additional computation.
    """

    # decode url for parsing
    url = url.decode('unicode_escape')
    Log('MediaObjectsForURL url =%s' %url)
    html = ElementFromURL(url)
    mo = []

    # create media objects for each video quality
    for node in html.xpath('//select[@id="selectQuality"]/option'):
        fmt = node.text
        video_url = node.get('value')

        mo.append(MediaObject(
            parts=[PartObject(key=Callback(PlayVideo, url=video_url))],
            video_resolution=fmt[:-1],
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming = True))  # if Client.Product != 'Plex Web' else False))

    return mo

########################################################################################
def PlayVideo(url):
    """Log the url and return the decoded base64 url"""

    Log('PlayVideo url=%s' %url)

    return Redirect(base64.b64decode(url))

########################################################################################
def ElementFromURL(url):
    """Retrun cloudflare url in html format"""

    scraper = cfscrape.create_scraper()
    page = scraper.get(url)
    myscrape = HTML.ElementFromString(page.text)

    return myscrape
