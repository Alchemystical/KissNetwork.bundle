#!/usr/bin/env python

"""Kiss(anime, cartoon, and drama) Service code"""

# import system modules
import base64, os, pickle, io

########################################################################################
# Load Dict, for some reason Dict is not defaulty loaded for service URLs

global Dict
global savedDict

Dict_file = os.path.join(
    os.getcwd().rsplit('Data')[0],
    'Data', 'com.plexapp.plugins.kissnetwork', 'Dict')

Log('Dict file path = %s' %Dict_file)

f = io.open(Dict_file, 'r')
savedDict = pickle.load(f)
f.close()

Dict = savedDict.copy()

Log('testing Dict, anime cookies = %s' %Dict['Cookies']['Anime']['cookie'])

########################################################################################
def NormalizeURL(url):
    """
    This function should return a 'normalised' version of the given URL.
    Plex uses the URL
    """

    return url

########################################################################################
def MetadataObjectForURL(url):
    """
    This function should create and return a metadata object (for example, a
    VideoClipObject) and populate it with metadata from the given URL.
    Only the metadata should be added here, the object's key and rating_key properties
    will be synthesised based on the URL.
    """

    #setup headers from dict
    LoadHeaders(url)

    Log('user-agent = %s | cookies = %s' %(HTTP.Headers['User-Agent'], HTTP.Headers['Cookie']))

    # decode url for parsing
    url = url.decode('unicode_escape')
    Log('MetadataObjectForURL url=%s' %url)
    html = HTML.ElementFromURL(url)

    # set the video title
    title = html.xpath("//option[@selected='selected']/text()")[0]
    title = title.replace('\n', '').strip()

    # set the video summary
    summary = html.xpath("//meta[@name='description']/@content")[0]
    summary = summary.replace('\n', '').strip()

    return VideoClipObject(title=title, summary=summary)

########################################################################################
def MediaObjectsForURL(url):
    """
    This function should create and return a list of media objects
    and part objects representing the media available at the given URL.
    Callbacks may be used if obtaining the final media location requires
    additional computation.
    """

    #setup headers from dict
    LoadHeaders(url)

    Log('user-agent = %s | cookies = %s' %(HTTP.Headers['User-Agent'], HTTP.Headers['Cookie']))

    # decode url for parsing
    url = url.decode('unicode_escape')
    Log('MediaObjectsForURL url =%s' %url)
    html = HTML.ElementFromURL(url)
    mo = []

    # create media objects for each video quality
    for node in html.xpath('//select[@id="selectQuality"]/option'):
        fmt = node.text
        video_url = node.get('value')

        mo.append(MediaObject(
            parts=[PartObject(key=Callback(PlayVideo, url=video_url))],
            video_resolution=fmt[:-1],
            container=Container.MP4,
            video_codec=VideoCodec.H264,
            audio_codec=AudioCodec.AAC,
            audio_channels=2,
            optimized_for_streaming = True))  # if Client.Product != 'Plex Web' else False))

    return mo

########################################################################################
def PlayVideo(url):
    """Log the url and return the decoded base64 url"""

    Log('PlayVideo url=%s' %url)

    return Redirect(base64.b64decode(url))

########################################################################################
def LoadHeaders(url):
    """Set Headers"""

    # decode url for parsing
    url = url.decode('unicode_escape')
    # get base url for headers
    base_url = 'http://' + url.rsplit('/')[2]
    # get title for headers
    title = base_url.rsplit('kiss')[1].rsplit('.')[0].title()
    # correct title for Dict
    if title == 'Asian':
        title = 'Drama'

    HTTP.Headers['Referer'] = base_url
    HTTP.Headers['User-Agent'] = Dict['Cookies'][title]['user-agent']
    HTTP.Headers['Cookie'] = Dict['Cookies'][title]['cookie']

    Log('base url = %s | cookies = %s' %(base_url, HTTP.Headers['Cookie']))
