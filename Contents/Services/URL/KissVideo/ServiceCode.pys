#!/usr/bin/env python

"""Kiss(anime, cartoon, and drama) Service code"""

# import Shared Service Code
import headers as Headers
import common as Common
import metadata as Metadata
import subprefs as SubPrefs
from openload import decode_openload
import kissdecrypt
import requests

try:
    import execjs
    execjs.eval("{a:true,b:function (){}}")
except:
    import execjs_110 as execjs
    Log.Warn('* PyExecJS Warn: Error using execjs v1.4.0, loaded v1.1.0 instead')

KissDecrypt = kissdecrypt.KissDecrypt()

########################################################################################
def MetadataObjectForURL(url):
    """
    This function should create and return a metadata object (for example, a
    VideoClipObject) and populate it with metadata from the given URL.
    Only the metadata should be added here, the object's key and rating_key properties
    will be synthesised based on the URL.
    """

    Log.Debug('*' * 80)
    Log.Debug('* MetadataObjectForURL url = %s' %url)
    url = Common.CorrectURL(url)

    video_id = int(url.split('=')[-1])
    show_url = url.rsplit('/', 1)[0]

    html = Headers.ElementFromURL(show_url)
    Log.Debug('*' * 80)

    genres, genres_list = Metadata.GetGenres(html)
    date_added = Metadata.GetDateAdded(html, url)
    thumb, art = Metadata.get_thumb_and_art(html, url)

    # Setup MovieObject for Moives
    if 'Movie' in genres:
        Log.Debug('* This is a Movie')
        Log.Debug('*' * 80)

        # remove 'Movie' from genre list
        genre_list = [g for g in genres if not g == 'Movie']
        mi = Metadata.GetBaseMovieInfo(html, url)
        summary = Common.StringCode(string=mi['summary'], code='decode') if mi['summary'] else None

        return MovieObject(
            title=mi['title'],
            genres=genre_list,
            tags=Metadata.string_to_list(Common.StringCode(string=mi['tags'], code='decode')) if mi['tags'] else [],
            source_title=mi['source_title'],
            originally_available_at=date_added if date_added else None,
            year=int(mi['year']) if mi['year'] else None,
            countries=Metadata.string_to_list(Common.StringCode(string=mi['countries'], code='decode')) if mi['countries'] else [],
            thumb=thumb,
            art=art,
            summary=summary
            )
    # Setup EpisodeObject for all shows that are not Movies
    else:
        Log.Debug('* This is a TV Show')

        si = Metadata.GetBaseShowInfo(html, url)
        summary = Common.StringCode(string=si['summary'], code='decode') if si['summary'] else None
        tags = Metadata.string_to_list(Common.StringCode(string=si['tags'], code='decode')) if si['tags'] else []
        show_name_raw = html.xpath('//div[@class="barContent"]/div/a[@class="bigChar"]/text()')[0]
        start_title = Metadata.get_title(html, video_id, show_name_raw)
        season_number = Metadata.GetSeasonNumber(start_title, show_name_raw, tags, summary)
        ep_name, ep_number = Metadata.GetEpisodeNameAndNumber(html, start_title, url)
        new_title = Metadata.GetEpisodeTitle(int(season_number), ep_name, int(ep_number))

        return EpisodeObject(
            title=new_title,
            source_title=si['source_title'],
            show=si['tv_show_name'],
            season=int(season_number),
            index=int(ep_number),
            tags=tags,
            originally_available_at=date_added if date_added else None,
            thumb=thumb,
            art=art,
            summary=summary
            )

########################################################################################
def MediaObjectsForURL(url):
    """
    This function should create and return a list of media objects
    and part objects representing the media available at the given URL.
    Callbacks may be used if obtaining the final media location requires
    additional computation.
    """

    Log.Debug('*' * 80)
    mo = []
    fmt_list = [('1080p', 'm37'), ('720p', 'm22'), ('480p', 'm59'), ('360p', 'm18')]
    prefs = get_prefs()
    url = Common.CorrectURL(url)

    if prefs['force_transcode'] == 'true':
        Log.Debug('* Force Transcoding ON')
        for fmt, m in fmt_list:
            mo.append(MediaObject(
                parts=[PartObject(key=Callback(PlayVideo, url=url, m=m))],
                video_resolution=fmt[:-1],
                audio_channels=2,
                optimized_for_streaming=False
                ))
    else:
        Log.Debug('* Force Trascoding OFF')
        # create media objects for each video quality
        for fmt, m in fmt_list:
            mo.append(MediaObject(
                parts=[PartObject(key=Callback(PlayVideo, url=url, m=m))],
                video_resolution=fmt[:-1],
                container=Container.MP4,
                video_codec=VideoCodec.H264,
                audio_codec=AudioCodec.AAC,
                audio_channels=2,
                optimized_for_streaming=True
                ))

    return mo

########################################################################################
@indirect
def PlayVideo(url, m, **kwargs):
    """
    Get Video URL
    Currently available host: GoogleVideo, OneDrive, and OpenLoad
    GoogleVideo links have the potential for multiple resolutions links
    OneDrive & OpenLoad give only one link (the highest), so no optional resolutions
    """

    Log.Debug('*' * 80)
    Log.Debug('* Client.Product     = %s' %Client.Product)
    Log.Debug('* Client.Platform    = %s' %Client.Platform)
    Log.Debug('* Client.Version     = %s' %Client.Version)

    prefs = get_prefs()

    if prefs['server'] == '1':
        req_url = url + '&s=openload'
    elif prefs['server'] == '2':
        req_url = url + '&s=stream'
    else:
        req_url = url

    if not 'Anime' in Common.GetTypeTitle(url):
        r = Headers.Request(req_url, raw=True)
        headers = Headers.GetHeadersForURL(url)
        dc = headers['cookie']
        headers.update({'cookie': '; '.join([dc, 'k_token=%s' %str(r.cookies['k_token'])])})
        page_text = r.text
    else:
        headers = None
        page_text = Headers.Request(req_url)

    gtest = True if Regex(r'id\=[\"\'](selectQuality)').search(page_text) else False
    if (gtest == False) and (prefs['server'] == '0'):
        page_text = Headers.Request(req_url + '&s=openload')

    onedrive = Regex(r'src\=[\"\'](https?\:\/\/onedrive\.live\.com\/prev\?.+?)[\"\']').search(page_text)
    openload = Regex(r'src\=[\"\'](https?\:\/\/openload.+?)[\"\']').search(page_text)
    streammoe = Regex(r'src\=[\"\'](https?\:\/\/stream\.moe\/embed.+?)[\"\']').search(page_text)
    if onedrive:
        Log.Debug('* OneDrive URL       = %s' %onedrive.group(1))
        vurl = get_onedrive_url(onedrive.group(1))
    elif openload:
        Log.Debug('* OpenLoad URL       = %s' %openload.group(1))
        vurl = get_openload_url(openload.group(1))
    elif streammoe:
        Log.Debug('* StreamMoe URL      = %s' %streammoe.group(1))
        vurl = get_streammoe_url(streammoe.group(1))
    else:
        vurl = get_googlevideo_url(page_text, url, m, headers)
    Log.Debug('* PlayVideo URL      = %s' %vurl)

    if (prefs['samsung_fix'] == 'true') and (prefs['force_transcode'] == 'false') and (prefs['server'] == '0'):
        Log.Debug('* Samsung Fix ON')
        Log.Debug('* Note: Videos will NO longer play outside the network connection.')
        try:
            vurl = get_url_redirect_v2(vurl)
            if 'googlevideo' in vurl and not vurl == False:
                Log.Debug('* URL Redirect       = %s' %vurl.split('?')[0] + '...')
            else:
                Log.Debug('* URL Redirect       = %s' %vurl)
        except Exception as e:
            Log.Debug('* URL Redirect faild. Returning PlayVideo URL instead')
            Log.Debug('* URL Redirect Error: %s' %str(e))
    else:
        Log.Debug('* Samsung Fix OFF')

    Log.Debug('*' * 80)

    if vurl:
        return IndirectResponse(VideoClipObject, key=vurl)

    raise Ex.MediaNotAvailable

####################################################################################################
def get_googlevideo_url(page_text, url, m, headers):
    """
    Get GoogleVideo URLs
    Returns the Hights stream playable depending on the previous Stream Selections
    If Stream not found, then try's to find next hightest.
    Example 1: format list = [1080p, 720p, 360p]
    If 480p was previously chosen, then 720p will be used
    Example 2: format list = [720p, 480p, 360p]
    If 1080p was previously chosen, then 720p will be used
    """

    html = HTML.ElementFromString(page_text)
    olist = html.xpath('//select[@id="selectQuality"]/option')
    type_title = Common.GetTypeTitle(url)
    type_title_lower = type_title.lower()
    if not olist:
        Log.Error('* This Video is broken, Kiss%s is working to fix it.' %type_title)
        raise Ex.MediaNotAvailable

    vurl = False
    vurls = []
    prefs = get_prefs()
    # format info taken from here:
    # https://github.com/rg3/youtube-dl/blob/fd050249afce1bcc9e7f4a127069375467007b55/youtube_dl/extractor/youtube.py#L281
    # mp4 {format: resolution} dictionary
    fmt_dict = {'37': '1080', '22': '720', '59': '480', '78': '480', '18': '360'}
    if prefs['force_transcode'] == 'true':
        # When force transcoding, then provide support for webm and flv video resolutions
        # webm {format: resolution} dictionary
        fmt_dict.update({'43': '360', '44': '480', '45': '720', '46': '1080'})
        # flv {format: resolution} dictionary
        fmt_dict.update({'35': '480', '34': '360'})
    # reversed mp4 format dictionary, paired values with resolutin selection in MediaObjectsForURL()
    rfmt_dict = {'1080': '37', '720': '22', '480': '59', '360': '18'}

    enc_test = Regex(r'(kissenc\.min\.js\?v\=(\d+))').search(page_text)
    for node in olist:
        if enc_test:
            encv = int(enc_test.group(2))
            post_data = None
            if encv == 5:
                try:
                    js = Regex(r'(?s)type\=[\"\']text\/javascript[\"\']\>(.*?(window[^\=]+).*?)\<\/script\>').search(page_text)
                    ra = Regex(r'(.+(window([^\=]+))[^\;]+)').findall(js.group(1))
                    for s, ws, w in ra:
                        s = s.replace(ws, 'var krsktest = %s; var temp' %w)

                        jsc = execjs.compile(s)
                        jskt = jsc.exec_('return krsktest')
                        jst = jsc.exec_('return temp')

                        try: jskt = jskt[0]
                        except: pass

                        if jskt.lower() == 'krsk':
                            post_data = {jskt: jst}
                except Exception as e:
                    Log.Error('* get_googlevideo_url Error: %s' %str(e))
            vurl_old = KissDecrypt.decrypt(node.get('value'), type_title_lower, url, headers, post_data)
        else:
            vurl_old = String.Base64Decode(node.get('value'))

        if 'googlevideo' in vurl_old:
            try:
                itag = vurl_old.split('=m')[1]
                vurls.append((vurl_old, fmt_dict[itag]))
            except:
                itag = 'No itag Found!'
                itag_test = Regex(r'itag\=(\d+)').search(vurl_old)
                if itag_test:
                    itag = str(itag_test.group(1))
                    if itag in fmt_dict.keys():
                        vurls.append((vurl_old, fmt_dict[itag]))
        else:
            try:
                itag = rfmt_dict[node.text.strip()[:-1]]
                vurls.append((vurl_old, node.text.strip()[:-1]))
            except Exception as e:
                itag = 'No itag Found: %s' %str(e)

        if not itag in fmt_dict.keys():
            Log.Warn('* Format NOT Supported: %s' %itag)

    if vurls:
        Log.Debug('* pre resolution selected = %s' %m)
        for item, mm in sorted(vurls, key=lambda tup: int(tup[1])):
            vurl = item
            nm = rfmt_dict[mm]
            if str(nm) == m[1:]:
                #Log.Debug('* Selecting %sp stream' %mm)
                break
            elif int(mm) > int(fmt_dict[m[1:]]):
                #Log.Debug('* Selecting %sp stream' %mm)
                break
        Log.Debug('* Selecting %sp stream' %mm)

    return vurl

####################################################################################################
def get_onedrive_url(onedrive_url):
    """
    Get OneDrive URLs
    Made by Twoure :P
    Code returns the download link for a OneDrive video
    Example Start URL
    https://onedrive.live.com/prev?cid=f90d37dd21022d17&id=F90D37DD21022D17%21108&authkey=%21AJZbMrbEbLJhvUk&parId=root&view=video&mode=interactiveEmbed
    Note the Start URL needs the 'cid', 'id', and 'authkey'
    No need to do the URL redirect, final video URL is NOT bound to local ip
    """

    html = HTML.ElementFromURL(onedrive_url)

    # Pull out the GetItemsLoaderConfing and store info in data dictionary
    for node in html.xpath('//script[@type="text/javascript"]'):
        match = Regex(r'(?s)GetItemsLoaderConfig\ \=\ (\{.*?\})\;').search(node.text_content())
        if match:
            test = match.group(1).replace('\n\r', '').strip()
            for i, s in enumerate(['cid', 'skyApiDomain', 'mkt', 'appId', 'canary', 'oauthToken', 'authKey', 'ticket', 'gb', 'rset']):
                if i == 0:
                    data = {s: Regex(r'%s\:\ \'(.*)\'\,' %s).search(test).group(1)}
                elif not s == 'rset':
                    data.update({s: Regex(r'%s\:\ \'(.*)\'\,' %s).search(test).group(1)})
                else:
                    data.update({s: Regex(r'%s\:\ \'(.*?)\'' %s).search(test).group(1)})
            break

    # parse parameters in URL
    uris = onedrive_url.split('&')
    for i, s in enumerate(uris):
        if i == 0:
            bs = s.split('?')[1]
            ss = bs.split('=')
            a = {ss[0]: ss[1]}
        else:
            ns = s.split('=')
            a.update({ns[0]: ns[1]})

    # create the request for the download url
    dl_url = 'https://onedrive.live.com/GetDownloadUrl/?cid=' + a['cid'] + '&resid=' + a['id'] + '&authkey=' + data['authKey'].decode('unicode-escape') + '&canary='
    # setup headers for request. Needs authKey and appId
    h = {'X-Requested-With': 'XMLHttpRequest', 'InvitationToken': data['authKey'].decode('unicode-escape'), 'AppId': data['appId'], 'Accept': 'application/json'}

    # open download request and parse json data
    try:
        # open download request and parse json data
        dl_data = JSON.ObjectFromURL(dl_url, headers=h)
        # remove the download info after .mp4, that way the video will play instead of force downloading
        vurl = dl_data['DownloadUrl'].split('?')[0]
    except Exception as e:
        Log.Error('* OneDrive Error: Cannot access %s' %dl_url)
        Log.Error('* OneDrive Error: %s' %str(e))
        vurl = False

    return vurl

####################################################################################################
def get_openload_url(ourl, count=0):
    """
    Get OpenLoad URLs
    Code returns stream link for OpenLoad videos
    Example Start URL
    https://openload.co/embed/rano_HSH6Fk/%5BHorribleSubs%5D_GATE_-_21_%5B720p%5D-r976.mp4
    Note the Start URL needs the 'fid' after "/embed/" and needs "/embed/" instead of "/f/"
    """

    try:
        base = Regex(r'(https?:\/\/openload\.\w+)\/\w+\/([^\/]+)').search(ourl)
        eurl = base.group(1) + '/embed/' + base.group(2)
        s = HTTP.Request(eurl, encoding=('utf-8'), headers={'User-Agent': Common.USER_AGENT, 'Referer': eurl}).content

        title = Regex(r'og\:title\"\s*?content\=\"([^\"]+)').search(s)
        title = String.Quote(title.group(1), usePlus=True) if title else None
        Log.Debug('* Openload video title = %s' %title)

        url = False
        urls = decode_openload(s)
        if urls:
            for u in urls:
                rurl = get_url_redirect_v2(u)
                if title == rurl.rsplit('/', 1)[1].split('?mime=')[0]:
                    url = rurl

        if not url:
            if (count == 2):
                Log.Error('* Openload Error: Tried 3 times to get Video URL, but Failed')
                return False
            else:
                count += 1
                Log.Warn('* Openload Warn: try %i faild to get Video URL, trying again' %count)
                return get_openload_url(eurl, count=count)
    except Exception as e:
        Log.Error('* Openload Error: Something went wrong, cannot access %s' %ourl)
        Log.Error('* Openload Error: %s' %str(e))
        url = False

    return url

####################################################################################################
def get_streammoe_url(moe_url):
    """Get Stream.moe URLs"""

    try:
        page = HTTP.Request(moe_url).content
    except Exception as e:
        Log.Error('* StreamMoe Error: %s' %str(e))
        return False

    r = Regex(r'contents\s*?\=\s*?atob\([\'\"]([^\'\"]+)').search(page)
    if r:
        html_text = String.Base64Decode(r.group(1))
        html = HTML.ElementFromString(html_text)

        vurl = html.xpath('//source/@src')
        if vurl:
            return vurl[0]

    return False

####################################################################################################
def get_url_redirect_v2(input_url):
    """URL Redirect V2 using requests.head"""

    r = requests.head(input_url, headers={'User-Agent': Common.USER_AGENT, 'Referer': input_url})
    if 'location' in r.headers.keys():
        return r.headers['location']
    elif 'Location' in r.headers.keys():
        return r.headers['Location']
    else:
        Log.Debug('* URL Redirect: No Redirect URL for \"%s\"' %input_url)
        Log.Debug('* URL Redirect: Headers = %s' %r.headers)
        return input_url

####################################################################################################
def get_prefs():
    """
    Get Prefs
    If a new key has not been added yet, do so here
    """

    prefs = SubPrefs.GetPrefs()
    if not 'samsung_fix' in prefs.keys():
        prefs.update({'samsung_fix': 'false'})

    if not 'force_transcode' in prefs.keys():
        prefs.update({'force_transcode': 'false'})

    if not 'server' in prefs.keys():
        prefs.update({'server': '0'})

    return prefs
