#!/usr/bin/env python

"""Kissmanga Service code - Gather all image URLs for a Chapter."""

# import Shared Service Code
import headers as Headers

####################################################################################################
def NormalizeURL(url):
    """This function should return a 'normalised' version of the given URL. Plex uses the URL"""

    return url

####################################################################################################
def MetadataObjectForURL(url):
    """
    This function should create and return a metadata object (for example, a VideoClipOb-
    ject) and populate it with metadata from the given URL. Only the metadata should be
    added here - the object's key and rating_key properties will be synthesised based on the URL.
    """

    title = url.rsplit('?', 1)[0].rsplit('/')[-1]

    return PhotoAlbumObject(key=Callback(GetPhotos, url=url), title=title)

####################################################################################################
def MediaObjectsForURL(url):
    """
    This function should create and return a list of media objects and part objects representing
    the media available at the given URL. Callbacks may be used if obtaining the final media
    location requires additional computation.
    """

    return [MediaObject(parts=Callback(GetPhotos, url=url))]

####################################################################################################
def GetPhotos(url):
    """
    This function pulls down all the image urls for a chapter and adds them to the
    'PhotoObject' container.
    """

    oc = ObjectContainer()

    # get relevant javascript block
    html = HTML.ElementFromURL(url, headers=Headers.GetHeadersForURL(url))

    for java in html.xpath('//script[@type="text/javascript"]'):
        javatext = java.text
        if javatext:
            if "lstImages" in javatext:
                # then do a regex search to pull out relevant text
                m = Regex('(?s)lstImages\.push\(\"([\S].*)\"\);').search(javatext).group(0)
                break

    # then split the string by the ';' to get each relevant line in an array
    image_lines = m.rsplit(';')

    # now iterate over each line and pull out the image url
    for item in image_lines:
        m = Regex('lstImages\.push\(\"([\S].*?)\"\)').search(item)

        if m:  # test for empty results
            image = m.group(1)
            Log.Info('image url = %s' %image)
            image_title = image.rsplit('/')[-1].rsplit('.', 1)[0]

            if "proxy" in image_title:
                image_title = image_title.rsplit('%')[-1].rsplit('2f')[1]

            oc.add(PhotoObject(
                key = image,
                rating_key = image,
                title = image_title,
                thumb = image))

    return oc
